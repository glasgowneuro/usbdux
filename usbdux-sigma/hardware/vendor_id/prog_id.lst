                   ; rev 0.9
                   ; (c) Bernd Porr, Bernd.Porr@cn.stir.ac.uk
                   ; GPL, GNU public license
                   ;
                   ;   This program is free software; you can redistribute it a
                   ;   it under the terms of the GNU General Public License as 
                   ;   the Free Software Foundation; either version 2 of the Li
                   ;   (at your option) any later version.
                   ;
                   ;   This program is distributed in the hope that it will be 
                   ;   but WITHOUT ANY WARRANTY; without even the implied warra
                   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Se
                   ;   GNU General Public License for more details.
                   ;
                   ;   You should have received a copy of the GNU General Publi
                   ;   along with this program; if not, write to the Free Softw
                   ;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA
                   ;
                   ; In conjunction with the as31.
                   ; Include-file for the FX2 by Cypress. The rest of the regs 
                   ; by the as31 itself.
                   ;
                   ; from the TRM of the FX2:
                   ;
                            ;;  CPU control
0000:                       .equ    CPUCS,0E600H
                            ;; interface config
0000:                       .equ    IFCONFIG,0E601H
0000:                       .equ    FIFORESET,0E604H
                            ;; Endpoint configs
0000:                       .equ    EP1OUTCFG,0E610H
0000:                       .equ    EP1INCFG,0E611H
0000:                       .equ    EP2CFG,0E612H
0000:                       .equ    EP4CFG,0E613H
0000:                       .equ    EP6CFG,0E614H
0000:                       .equ    EP8CFG,0E615H
                            ;; packets per frame, always one for USB 1.1
0000:                       .equ    EP2ISOINPKTS,0E640H
0000:                       .equ    EP4ISOINPKTS,0E641H
0000:                       .equ    EP6ISOINPKTS,0E642H
0000:                       .equ    EP8ISOINPKTS,0E643H
                            ;; endpoint byte counts
0000:                       .equ    EP1OUTBC,0E68DH
0000:                       .equ    EP2BCH,0E690H
0000:                       .equ    EP2BCL,0E691H
0000:                       .equ    EP4BCH,0E694H
0000:                       .equ    EP4BCL,0E695H
0000:                       .equ    EP6BCH,0E698H
0000:                       .equ    EP6BCL,0E699H
0000:                       .equ    EP8BCH,0E69CH
0000:                       .equ    EP8BCL,0E69DH
                            ;;
0000:                       .equ    EP4AUTOINLENH,0E622H
0000:                       .equ    EP4AUTOINLENL,0E623H
0000:                       .equ    EP2FIFOCFG,0E618H
0000:                       .equ    EP4FIFOCFG,0E619H
0000:                       .equ    EP6FIFOCFG,0E61AH
0000:                       .equ    EP8FIFOCFG,0E61BH
                            ;; 
0000:                       .equ    INPKTEND,0E648H
                            ;; 
                            ;; endpoint control
0000:                       .equ    EP2CS,0E6A3H
0000:                       .equ    EP4CS,0E6A4H
0000:                       .equ    EP6CS,0E6A5H
0000:                       .equ    EP8CS,0E6A6H
                            ;; endpoint buffers
0000:                       .equ    EP2FIFOBUF,0F000H
0000:                       .equ    EP4FIFOBUF,0F400H
0000:                       .equ    EP6FIFOBUF,0F800H
0000:                       .equ    EP8FIFOBUF,0FC00H
                            ;; IRQ enable for bulk NAK
0000:                       .equ    IBNIE,0E658H
                            ;; interrupt requ for NAK
0000:                       .equ    IBNIRQ,0E659H
                            ;; USB INT enables
0000:                       .equ    USBIE,0E65CH
                            ;; USB interrupt request
0000:                       .equ    USBIRQ,0E65DH
                            ;; endpoint IRQ enable
0000:                       .equ    EPIE,0E65EH
                            ;; endpoint IRQ requests
0000:                       .equ    EPIRQ,0E65FH
                            ;; USB error IRQ requests
0000:                       .equ    USBERRIE,0E662H
                            ;; USB error IRQ request
0000:                       .equ    USBERRIRQ,0E663H
                            ;; USB interrupt 2 autovector
0000:                       .equ    INT2IVEC,0E666H
                            ;; autovector enable
0000:                       .equ    INTSETUP,0E668H
                            ;; port cfg
0000:                       .equ    PORTACFG,0E670H
0000:                       .equ    PORTCCFG,0E671H
0000:                       .equ    PORTECFG,0E672H
                            ;; I2C bus
0000:                       .equ    I2CS,0E678H
0000:                       .equ    I2DAT,0E679H
0000:                       .equ    I2CTL,0E67AH
                            ;; auto pointers, read/write is directed to the poi
0000:                       .equ    XAUTODAT1,0E67BH
0000:                       .equ    XAUTODAT2,0E67CH
                            ;; USB-control
0000:                       .equ    USBCS,0E680H
                   
0000:                       .equ    IOA,80H
0000:                       .equ    DPL1,84H
0000:                       .equ    DPH1,85H
0000:                       .equ    DPS,86H
0000:                       .equ    CKCON,8Eh
0000:                       .equ    IOB,90H
0000:                       .equ    EXIF,91h
0000:                       .equ    MPAGE,92h
0000:                       .equ    AUTOPTRH1,9AH
0000:                       .equ    AUTOPTRL1,9BH
0000:                       .equ    AUTOPTRH2,9DH
0000:                       .equ    AUTOPTRL2,9EH
0000:                       .equ    IOC,0A0H
0000:                       .equ    INT2CLR,0A1H
0000:                       .equ    INT4CLR,0A2H
0000:                       .equ    EP2468STAT,0AAH
0000:                       .equ    EP24FIFOFLGS,0ABH
0000:                       .equ    EP68FIFOFLGS,0ACH
0000:                       .equ    AUTOPTRSETUP,0AFH
0000:                       .equ    IOD,0B0H
0000:                       .equ    IOE,0B1H
0000:                       .equ    OEA,0B2H
0000:                       .equ    OEB,0B3H
0000:                       .equ    OEC,0B4H
0000:                       .equ    OED,0B5H
0000:                       .equ    OEE,0B6H
0000:                       .equ    EIE,0E8h
                   
                   
                            ;;; end of file
                            
                            
                   
                   ;;; Bernd Porr, bp1@cn.stir.ac.uk
                   ;;;
                   ;;; 
0000:                       .org    0000h
0000: 02 02 00              ljmp    main
                   
0043:                       .org    0043h           ; the IRQ2-vector
0043: 02 02 6C              ljmp    int2            ; irq service-routine
                            
0200:                       .org    0200h
                            
                            ;; main
                   main:
0200: 90 E6 00              mov     DPTR,#CPUCS
0203: 74 14                 mov     a,#000010100b   ; 48MHz clock
0205: F0                    movx    @DPTR,a
                   
0206: 90 E6 78              mov     DPTR,#I2CS      ; i2c control
0209: E0                    movx    a,@dptr                 ; get the status
020A: 90 01 00              mov     dptr,#100h      ; point to addr 100h
020D: F0                    movx    @dptr,a                 ; store status ther
                   
                            ;;
020E: 90 E6 78              mov     dptr,#I2CS      ; start
0211: 74 80                 mov     a,#80h
0213: F0                    movx    @dptr,a
                            ;;
0214: 90 E6 79              mov     dptr,#I2DAT     ; address
0217: 74 A0                 mov     a,#10100000b    ; write to eprom
0219: F0                    movx    @dptr,a                 ; write to addr 0
                            ;;
021A: 7B 00                 mov     r3,#00h                 ; address:0h
021C: 12 02 5E              lcall   sendi2c
021F: 7B C0                 mov     r3,#0c0h        ; only usb id
0221: 12 02 5E              lcall   sendi2c
0224: 7B D8                 mov     r3,#0d8h        ; univ of stir,L
0226: 12 02 5E              lcall   sendi2c
0229: 7B 13                 mov     r3,#013h        ; univ of stir,H
022B: 12 02 5E              lcall   sendi2c
022E: 7B 20                 mov     r3,#20h                 ; usbduxsigma,L
0230: 12 02 5E              lcall   sendi2c
0233: 7B 00                 mov     r3,#00h                 ; usbduxsigma,H
0235: 12 02 5E              lcall   sendi2c
0238: 7B 00                 mov     r3,#00h                 ; rev
023A: 12 02 5E              lcall   sendi2c
023D: 7B 00                 mov     r3,#00h                 ; rev
023F: 12 02 5E              lcall   sendi2c
0242: 7B 00                 mov     r3,#00h                 ; connected, 100kHz
0244: 12 02 5E              lcall   sendi2c         
                            ;;
0247: 90 E6 78              mov     dptr,#I2CS      ; stop
024A: 74 40                 mov     a,#40h
024C: F0                    movx    @dptr,a
                   
                   i2cov:   
024D: 90 E6 78              mov     DPTR,#I2CS      ; i2c control
0250: E0                    movx    a,@dptr                 ; get the status
0251: 90 01 01              mov     dptr,#101h      ; point to addr 100h
0254: F0                    movx    @dptr,a                 ; store status ther
                   
0255: 90 E6 80              mov     DPTR,#0E680H
0258: 74 0C                 mov     a,#0CH
025A: F0                    movx    @dptr,a                 ; disconnect
                   
                            ;;; do nothing
025B: 02 02 5B     loop:    ljmp    loop
                            
                            
                   
                   
                   ;;; sends byte in r3 to the i2c controller
                   sendi2c:
025E: 90 E6 78              mov     dptr,#I2CS      ; status
                   waiti2c:         
0261: E0                    movx    a,@dptr                 ; get it
0262: 54 01                 anl     a,#1            ; done bit
0264: 60 FB                 jz      waiti2c                 ; have to wait
0266: 90 E6 79              mov     dptr,#I2DAT     ; data register
0269: EB                    mov     a,r3            ; get the data
026A: F0                    movx    @dptr,a                 ; send it
026B: 22                    ret
                            
                   ;;; 
                   ;;;
                   ;;;
                   ;;;
                   ;;;
                   ;;;
026C: C0 86        int2:    push    dps
026E: C0 82                 push    dpl
0270: C0 83                 push    dph
0272: C0 84                 push    dpl1
0274: C0 85                 push    dph1
0276: C0 E0                 push    acc
0278: C0 D0                 push    psw
027A: C0 00                 push    00h             ; R0
027C: C0 01                 push    01h             ; R1
027E: C0 02                 push    02h             ; R2
0280: C0 03                 push    03h             ; R3
0282: C0 04                 push    04h             ; R4
0284: C0 05                 push    05h             ; R5
0286: C0 06                 push    06h             ; R6
0288: C0 07                 push    07h             ; R7
                                    
                            ;; clear INT2
028A: E5 91                 mov     a,EXIF          ; FIRST clear the USB (INT2
028C: C2 E4                 clr     acc.4
028E: F5 91                 mov     EXIF,a          ; Note: EXIF reg is not 805
                   
0290: D0 07                 pop     07h
0292: D0 06                 pop     06h
0294: D0 05                 pop     05h
0296: D0 04                 pop     04h             ; R4
0298: D0 03                 pop     03h             ; R3
029A: D0 02                 pop     02h             ; R2
029C: D0 01                 pop     01h             ; R1
029E: D0 00                 pop     00h             ; R0
02A0: D0 D0                 pop     psw
02A2: D0 E0                 pop     acc 
02A4: D0 85                 pop     dph1 
02A6: D0 84                 pop     dpl1
02A8: D0 83                 pop     dph 
02AA: D0 82                 pop     dpl 
02AC: D0 86                 pop     dps
02AE: 32                    reti
                   
                   
                   
                   
                   
                   
02AF:              .End
                   
                   
                   
